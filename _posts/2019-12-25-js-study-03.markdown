---
layout:     post
title:      "从零开始学习Javascript-03"
subtitle:   "字符串、数组、对象"
date:       2019-12-25 13:42PM
author:     "hdh"
header-img: "img/post-bg-js-version.jpg"
tags:
    - 前端开发
    - JavaScript
    - 基础
---


**高阶函数**（higher-order function）  

JS的函数可以指向某个变量。变量可以指向函数，函数的参数可以接受变量，那一个函数就可以接受另一个函数作为参数。从英文的字面意思来看就更复杂排序的函数。更加好理解，就是函数里面有函数的意思。举个简单的例子  
  
    function add(x, y, f){  
        return f(x) + f(y);
    }
调用：add(-5, 6, math.abs)  

    x = -5;
    y = 6;
    f = Math.abs;
    f(x) + f(y) ==> Math.abs(-5) + Math.abs(6) ==> 11;
    return 11;
**map**    
map()定义的是在JS的Array中，调用Array的map()，传入自己的函数，就可以得到新的Array结果。  

    function pow(x) {
    return x * x;  
    }  
    var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9;
    var results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]
    console.log(results);
其实这里就是map函数里面传入一个新的参数（pow函数）。  

**reduce**  
reduce就是把函数作用在array的[x1, x2, x3..]上，这个函数必须接受两个参数然后，reduce的结果和序列下一个参数做累积计算。直观的看：  

    [x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)  

    var arr = [1, 3, 5, 7, 9];
    arr.reduce(function (x, y) {
        return x + y;
    }); // 25
    


**filter**  
过滤器  
接收一个函数，根据返回值决定是否保留该元素  

    var arr = [1, 2, 4, 5, 6, 9, 10, 15];
    var r = arr.filter(function (x) {
        return x % 2 !== 0;
    });
    r; // [1, 5, 9, 15]

**every**  
用作判断数组的元素是否满足测试条件  

**find/findIndex**  
find()用于查找符合条件的第一个函数如果找到就返回这个元素，否则返回undefined。。findIndex返回索引，找不到返回-1.  

**forEach**  
以此传入函数但是不会返回新的数组。常用于遍历数组，传入函数不需要返回值
